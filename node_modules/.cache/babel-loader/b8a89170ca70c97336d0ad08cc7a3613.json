{"ast":null,"code":"import _classCallCheck from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lboylan/Documents/Homework/HW3/graph-bar/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Bar from './Components/Bar/Bar.js';\nimport Graph from './Components/Graph/Graph.js';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      baseCode: \"USD\",\n      rates: [] // Add data during initial page load. Kind of likke constructor\n\n    };\n\n    _this.componentDidMount = function () {\n      console.log(\"In did Mount and State:\", _this.state);\n\n      _this.getData();\n    };\n\n    _this.onBaseCodeChange = function (ev) {\n      _this.setState({\n        baseCode: ev.target.value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /* Failed\n          <h1 className=\"Title\"> Currency</h1>\n          <h2 className=\"BaseValue\">Base Currency:</h2>\n          <select basecode={this.baseCode} className=\"BaseCode\" onChange={this.onBaseCodeChange}>\n            <option value=\"USA\">USA</option>\n            <option value=\"AUD\">AUD</option>\n            <option value=\"SGD\">SGD</option>\n            <option value=\"EUR\">EUR</option>\n          </select>\n          <Graph>\n            this.state.rates.map((values, indx)=>{\n              <Bar\n              style={idx} \n              title={idx}\n              symbol={idx} \n              />\n          })\n          </Graph>\n        </div>\n        );\n      }\n    */\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \" Currency\"), React.createElement(\"h2\", {\n        className: \"BaseValue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Base Currency:\"), React.createElement(\"select\", {\n        basecode: this.baseCode,\n        className: \"BaseCode\",\n        onChange: this.onBaseCodeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"USA\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"USA\"), React.createElement(\"option\", {\n        value: \"AUD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"AUD\"), React.createElement(\"option\", {\n        value: \"SGD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"SGD\"), React.createElement(\"option\", {\n        value: \"EUR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"EUR\")), React.createElement(Graph, {\n        className: \"Graph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Bar, {\n        className: \"Bar\",\n        style: this.state.rates.barStyle,\n        title: this.state.rates.countryCode,\n        symbol: \"$\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var _this2 = this;\n\n      console.log(\"In GetData\");\n      fetch(\"https://api.exchangeratesapi.io/latest?base=USD&symbols=BGN,GBP,AUD,EUR\").then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(\"Got Data\");\n        console.log(\"Data=\", data);\n        console.log(\"Rates=\", data.rates);\n\n        _this2.buildData(data.rates);\n      });\n      /*       \n             /* Not working\n              // 404\n              if (!data.main) {\n                this.setState({\n                  location: \"Not found.\",\n                });\n                return;\n              }\n      */\n    }\n  }, {\n    key: \"buildData\",\n    value: function buildData(rates) {\n      console.log(\"In buildData\");\n      console.log(\"Rates=\", rates);\n      var arrData = [];\n\n      var _arr = Object.keys(rates);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        console.log(\"in loop to get rates\");\n        var value = rates[key];\n        console.log(\"value=\", value); //Check for properties from prototype chain   \n\n        if (rates.hasOwnProperty(key)) {\n          var newData = {\n            barStyle: \"\",\n            countryCode: \"\",\n            monetarySymbol: \"$\"\n          }; //not a property from prototype chain\n          // format value to be x.xx\n\n          var formatValue = parseFloat(value).toFixed(2) * 30;\n          console.log(\"formatValue=\", formatValue); // format the HTML style attribute\n\n          var height = formatValue + '%';\n          console.log(\"height=\", height);\n          console.log(\"key=\", key); //            newData.barStyle=height;\n\n          newData.barStyle = {\n            height: formatValue + '%'\n          };\n          newData.countryCode = key;\n          newData.monetarySymbol = '$';\n          console.log(\"newData=\", newData); // arrData.push(JSON.stringify(newData));              \n\n          Object.assign(arrData, newData); // console.log(\"arrData=\", arrData);\n          //const newArray = appendObjTo(arrData, newData);\n          //const frozenObj = Object.freeze(newData);\n          //const tmpData = arrData;\n          //arrData = tmpData.concat(newData);\n\n          console.log(\"arrData.length=\", arrData.length);\n          console.log(\"arrData\", arrData);\n        }\n      } // Modify State\n\n\n      this.setState({\n        rates: arrData\n      });\n    }\n  }, {\n    key: \"appendObjTo\",\n    value: function appendObjTo(thatArray, newObj) {\n      var frozenObj = Object.freeze(newObj);\n      return Object.freeze(thatArray.concat(frozenObj));\n    }\n    /*\n    getSelect()\n    {\n        // Create a query string by setting the new baseCode and removing new base from comparator\n        console.log(\"In GetSelect\");\n        \n        // Currently displayed currencies;\n        let symbols = [\"BGN\", \"SGD\", \"AUD\", \"EUR\", \"USD\"];\n        let comparator = \"BGN,SGD,AUD,EUR,USD\";\n        \n        \n        // Get the requested base currency\n        //const baseCode = document.getElementById(\"BaseCode\").value;\n        console.log(\"New Base Code:\", this.baseCode);\n        \n        \n        let i = 0;\n        while ((symbols[i++].valueOf() !== this.baseCode) && ( i < symbols.length))  // find the code in symbols\n        {}\n        \n        i--;  // reposition counter to found item\n        if (symbols[i] === this.baseCode)\n        {\n            comparator = symbols.splice(i,1);  // remmove elemment\n        }\n        console.log(\"symbols:\", comparator);\n        \n        let fetchString='https://api.exchangeratesapi.io/2018-11-01?base=' + this.baseCode + \"&symbols=\" + symbols;\n        \n        // Make request\n        fetch(fetchString)\n         .then(response => response.json())\n         .then ( (data) => {\n               console.log(\"Got Data\");\n               console.log(data);\n               this.buildData(data.rates);\n           });\n    }\n    \n    */\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/lboylan/Documents/Homework/HW3/graph-bar/src/App.js"],"names":["React","Component","Bar","Graph","App","state","baseCode","rates","componentDidMount","console","log","getData","onBaseCodeChange","ev","setState","target","value","barStyle","countryCode","fetch","then","response","json","data","buildData","arrData","Object","keys","key","hasOwnProperty","newData","monetarySymbol","formatValue","parseFloat","toFixed","height","assign","length","thatArray","newObj","frozenObj","freeze","concat"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nimport Bar from './Components/Bar/Bar.js'\nimport Graph from './Components/Graph/Graph.js'\n\nclass App extends Component {\n/* Debug\nstate = {\n  baseCode:\"USD\",\n  rates:[\n  {\n    barStyle: {height:'51.6em'}, \n    countryCode: \"BGN\",\n    monetarySymbol:\"$\",     \n  },\n  {\n    barStyle: '3%', \n    countryCode: \"GBP\",\n    monetarySymbol:\"$\",     \n  },\n  {\n    barStyle: '{height:\"1.4%\"}', \n    countryCode: \"AUD\",\n    monetarySymbol:\"$\",     \n  },\n  {\n    barStyle: {height:\"90.4%\"}, \n    countryCode: \"EUR\",\n    monetarySymbol:\"$\",     \n  },\n   {\n    barStyle: \"90%\", \n    countryCode: \"GDP\",\n    monetarySymbol:\"$\",     \n  }\n  ],\n}\n\n*/\n\nstate = {\n  baseCode:\"USD\",\n  rates:[],\n}\n\n\n  // Add data during initial page load. Kind of likke constructor\n    componentDidMount = () => {\n    console.log(\"In did Mount and State:\", this.state);\n    this.getData();\n  }\n\n/* Failed\n      <h1 className=\"Title\"> Currency</h1>\n      <h2 className=\"BaseValue\">Base Currency:</h2>\n      <select basecode={this.baseCode} className=\"BaseCode\" onChange={this.onBaseCodeChange}>\n        <option value=\"USA\">USA</option>\n        <option value=\"AUD\">AUD</option>\n        <option value=\"SGD\">SGD</option>\n        <option value=\"EUR\">EUR</option>\n      </select>\n      <Graph>\n        this.state.rates.map((values, indx)=>{\n          <Bar\n          style={idx} \n          title={idx}\n          symbol={idx} \n          />\n      })\n      </Graph>\n    </div>\n    );\n  }\n*/\n\nrender() \n{\n\n    return (\n      <div>\n        <h1 className=\"Title\"> Currency</h1>\n        <h2 className=\"BaseValue\">Base Currency:</h2>\n        <select basecode={this.baseCode} className=\"BaseCode\" onChange={this.onBaseCodeChange}>\n          <option value=\"USA\">USA</option>\n          <option value=\"AUD\">AUD</option>\n          <option value=\"SGD\">SGD</option>\n          <option value=\"EUR\">EUR</option>\n        </select>\n        <Graph className=\"Graph\">       \n          <Bar className=\"Bar\" style={this.state.rates.barStyle} title={this.state.rates.countryCode} symbol=\"$\"/>\n         </Graph>\n      </div>\n    );\n  }\n\n  onBaseCodeChange = (ev) => {\n    this.setState({\n      baseCode: ev.target.value,\n    });\n  }\n\ngetData()\n{\n    console.log(\"In GetData\");\n  \n\n     fetch(\"https://api.exchangeratesapi.io/latest?base=USD&symbols=BGN,GBP,AUD,EUR\")\n     .then(response => response.json())\n     .then ( (data) => {\n           console.log(\"Got Data\");\n           console.log(\"Data=\", data);\n           console.log(\"Rates=\", data.rates);\n           this.buildData(data.rates);\n       });\n\n/*       \n       /* Not working\n        // 404\n        if (!data.main) {\n          this.setState({\n            location: \"Not found.\",\n          });\n          return;\n        }\n*/\n}\n\n\nbuildData(rates)\n{\n    console.log(\"In buildData\");\n    console.log(\"Rates=\", rates);\n    \n    const arrData = [];\n  \n   \n    for (const key of Object.keys(rates))\n    {\n        console.log(\"in loop to get rates\");\n        const value = rates[key];\n        console.log(\"value=\",value);\n        \n        //Check for properties from prototype chain   \n        if (rates.hasOwnProperty(key))\n        {\n            const newData = {\n            barStyle:\"\",\n            countryCode:\"\",\n            monetarySymbol:\"$\"};\n            \n            //not a property from prototype chain\n            // format value to be x.xx\n            const formatValue = parseFloat(value).toFixed(2) * 30;\n            console.log(\"formatValue=\", formatValue);\n            // format the HTML style attribute\n            const height = formatValue + '%';\n            console.log(\"height=\",height);\n            console.log(\"key=\",key);\n            \n//            newData.barStyle=height;\n            newData.barStyle = { height: formatValue + '%'};\n            newData.countryCode=key;\n            newData.monetarySymbol='$';\n                      \n            console.log(\"newData=\", newData);  \n            // arrData.push(JSON.stringify(newData));              \n            Object.assign(arrData,newData);          \n            // console.log(\"arrData=\", arrData);\n            //const newArray = appendObjTo(arrData, newData);\n            //const frozenObj = Object.freeze(newData);\n            //const tmpData = arrData;\n            //arrData = tmpData.concat(newData);\n            console.log(\"arrData.length=\",arrData.length);\n            console.log(\"arrData\", arrData);\n        }\n    }\n    \n    // Modify State\n     this.setState({\n         rates:arrData,\n     });\n}\n\nappendObjTo(thatArray, newObj) {\n    const frozenObj = Object.freeze(newObj);\n    return Object.freeze(thatArray.concat(frozenObj));\n}\n\n\n/*\ngetSelect()\n{\n    // Create a query string by setting the new baseCode and removing new base from comparator\n    console.log(\"In GetSelect\");\n    \n    // Currently displayed currencies;\n    let symbols = [\"BGN\", \"SGD\", \"AUD\", \"EUR\", \"USD\"];\n    let comparator = \"BGN,SGD,AUD,EUR,USD\";\n    \n    \n    // Get the requested base currency\n    //const baseCode = document.getElementById(\"BaseCode\").value;\n    console.log(\"New Base Code:\", this.baseCode);\n    \n    \n    let i = 0;\n    while ((symbols[i++].valueOf() !== this.baseCode) && ( i < symbols.length))  // find the code in symbols\n    {}\n    \n    i--;  // reposition counter to found item\n    if (symbols[i] === this.baseCode)\n    {\n        comparator = symbols.splice(i,1);  // remmove elemment\n    }\n    console.log(\"symbols:\", comparator);\n    \n    let fetchString='https://api.exchangeratesapi.io/2018-11-01?base=' + this.baseCode + \"&symbols=\" + symbols;\n    \n    // Make request\n    fetch(fetchString)\n     .then(response => response.json())\n     .then ( (data) => {\n           console.log(\"Got Data\");\n           console.log(data);\n           this.buildData(data.rates);\n       });\n}\n\n*/\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}