{"ast":null,"code":"import _classCallCheck from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lboylan/Documents/Homework/HW3/graph-bar/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Bar from './Components/Bar/Bar.js';\nimport Graph from './Components/Graph/Graph.js';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      height: \"50%\",\n      countryCode: \"Test\",\n      monetarySymbol: \"$\",\n      baseCode: \"USD\" // Add data during initial page load. Kind of likke constructor\n\n    };\n\n    _this.componentDidMount = function () {\n      console.log(\"In did Mount and State:\", _this.state);\n\n      _this.getData();\n    };\n\n    _this.onBaseCodeChange = function (ev) {\n      _this.setState({\n        baseCode: ev.target.value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \" Currency\"), React.createElement(\"h2\", {\n        className: \"BaseValue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Base Currency:\"), React.createElement(\"select\", {\n        basecode: this.baseCode,\n        className: \"BaseCode\",\n        onChange: this.onBaseCodeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"USA\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"USA\"), React.createElement(\"option\", {\n        value: \"AUD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"AUD\"), React.createElement(\"option\", {\n        value: \"SGD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"SGD\"), React.createElement(\"option\", {\n        value: \"EUR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"EUR\")), React.createElement(Graph, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Bar, {\n        style: this.state.height,\n        title: this.state.countryCode,\n        symbol: this.state.monetarySymbol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      console.log(\"In GetData\"); // The data format from the remote site will be\n      // \"date\": \"YYYY-MM-DD\",\n      // \"rates\": {\"CCC\":dec,\"CCC\":dec,}, \n      // \"base\":  \"3-letter string\"\n\n      /* Use to test\n      const data =\n      {\n          \"date\" : \"2018-01-01\",\n          \"rates\":{\"USD\":1.0,\"GBP\":10.0},\n          \"base\":\"USD \"        \n      };\n      /*\n       fetch(\"https://api.exchangeratesapi.io/latest?base=USD&symbols=BGN,GBP,AUD,EUR\")\n       .then(response => response.json())\n       .then ( (data) => {\n             console.log(\"Got Data\");\n             console.log(data);\n             this.buildData(data.rates);\n         });\n         \n         /* Not working\n          // 404\n          if (!data.main) {\n            this.setState({\n              location: \"Not found.\",\n            });\n            return;\n          }\n      */\n    }\n  }, {\n    key: \"buildData\",\n    value: function buildData(rates) {\n      console.log(\"In buildData\"); //Using rates, refresh the graph\n\n      /*\n      // The format of the HTML to be modified is:\n      let graph = document.querySelect('#Graph');\n      <div className=\"Graph\">\n          <div className=\"Graph-data1\" onclick=\"alert(\\'EUR costs 0.88lb\\') \" style=\"height:88.5%\" \">EUR &#8364</div>\n          <div className=\"Graph-data2\" style=\"height:75.5%\">USD $</div>\n          <div className=\"Graph-data3\" style=\"height:55.9%\">AUD $</div>\n          <div className=\"Graph-data4\" style=\"height:45.5%\">GBP &pound</div>\n      </div>\n      */\n      // Get the rates\n      // Note: used for..of becasue it is MUCH faster than Object.entries\n\n      var _arr = Object.keys(this.rates);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        var value = this.rates[key]; //Check for properties from prototype chain   \n\n        if (this.rates.hasOwnProperty(key)) {\n          //not a property from prototype chain\n          // format value to be x.xx\n          var formatValue = parseFloat(value).toFixed(2) * 30; // format the HTML style attribute\n\n          var style = 'height:' + formatValue + '%'; // Modify State\n\n          this.setState = {\n            style: style,\n            countryCode: key,\n            monetarySymbol: \"$\"\n          };\n        }\n      }\n    }\n    /*\n    getSelect()\n    {\n        // Create a query string by setting the new baseCode and removing new base from comparator\n        console.log(\"In GetSelect\");\n        \n        // Currently displayed currencies;\n        let symbols = [\"BGN\", \"SGD\", \"AUD\", \"EUR\", \"USD\"];\n        let comparator = \"BGN,SGD,AUD,EUR,USD\";\n        \n        \n        // Get the requested base currency\n        //const baseCode = document.getElementById(\"BaseCode\").value;\n        console.log(\"New Base Code:\", this.baseCode);\n        \n        \n        let i = 0;\n        while ((symbols[i++].valueOf() !== this.baseCode) && ( i < symbols.length))  // find the code in symbols\n        {}\n        \n        i--;  // reposition counter to found item\n        if (symbols[i] === this.baseCode)\n        {\n            comparator = symbols.splice(i,1);  // remmove elemment\n        }\n        console.log(\"symbols:\", comparator);\n        \n        let fetchString='https://api.exchangeratesapi.io/2018-11-01?base=' + this.baseCode + \"&symbols=\" + symbols;\n        \n        // Make request\n        fetch(fetchString)\n         .then(response => response.json())\n         .then ( (data) => {\n               console.log(\"Got Data\");\n               console.log(data);\n               this.buildData(data.rates);\n           });\n    }\n    \n    */\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/lboylan/Documents/Homework/HW3/graph-bar/src/App.js"],"names":["React","Component","Bar","Graph","App","state","height","countryCode","monetarySymbol","baseCode","componentDidMount","console","log","getData","onBaseCodeChange","ev","setState","target","value","rates","Object","keys","key","hasOwnProperty","formatValue","parseFloat","toFixed","style"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport Bar from './Components/Bar/Bar.js'\nimport Graph from './Components/Graph/Graph.js'\n\nclass App extends Component {\n/*state ={\n        \"date\" : \"2018-01-01\",\n        \"rates\":{\"USD\":1.0,\"GBP\":10.0},\n        \"baseCode\":\"USD \"        \n}\n*/\n\nstate = {\n  height: \"50%\",\n  countryCode:\"Test\",\n  monetarySymbol:\"$\",\n  baseCode:\"USD\"\n}\n\n  // Add data during initial page load. Kind of likke constructor\n    componentDidMount = () => {\n    console.log(\"In did Mount and State:\", this.state);\n    this.getData();\n  }\n\n\n  render() \n  {\n    return (\n    <div className=\"App\">\n      <h1 className=\"Title\"> Currency</h1>\n      <h2 className=\"BaseValue\">Base Currency:</h2>\n      <select basecode={this.baseCode} className=\"BaseCode\" onChange={this.onBaseCodeChange}>\n        <option value=\"USA\">USA</option>\n        <option value=\"AUD\">AUD</option>\n        <option value=\"SGD\">SGD</option>\n        <option value=\"EUR\">EUR</option>\n      </select>\n      <Graph>\n        <Bar \n          style={this.state.height} \n          title={this.state.countryCode}\n          symbol={this.state.monetarySymbol} \n          />\n      </Graph>\n    </div>\n    );\n  }\n\n  onBaseCodeChange = (ev) => {\n    this.setState({\n      baseCode: ev.target.value,\n    });\n  }\n\ngetData()\n{\n    console.log(\"In GetData\");\n    \n    // The data format from the remote site will be\n    // \"date\": \"YYYY-MM-DD\",\n    // \"rates\": {\"CCC\":dec,\"CCC\":dec,}, \n    // \"base\":  \"3-letter string\"\n    \n    /* Use to test\n    const data =\n    {\n        \"date\" : \"2018-01-01\",\n        \"rates\":{\"USD\":1.0,\"GBP\":10.0},\n        \"base\":\"USD \"        \n    };\n  \n/*\n     fetch(\"https://api.exchangeratesapi.io/latest?base=USD&symbols=BGN,GBP,AUD,EUR\")\n     .then(response => response.json())\n     .then ( (data) => {\n           console.log(\"Got Data\");\n           console.log(data);\n           this.buildData(data.rates);\n       });\n       \n       /* Not working\n        // 404\n        if (!data.main) {\n          this.setState({\n            location: \"Not found.\",\n          });\n          return;\n        }\n*/\n}\n\n\nbuildData(rates)\n{\n    console.log(\"In buildData\");\n    \n    //Using rates, refresh the graph\n         \n    /*\n    // The format of the HTML to be modified is:\n    let graph = document.querySelect('#Graph');\n    <div className=\"Graph\">\n        <div className=\"Graph-data1\" onclick=\"alert(\\'EUR costs 0.88lb\\') \" style=\"height:88.5%\" \">EUR &#8364</div>\n        <div className=\"Graph-data2\" style=\"height:75.5%\">USD $</div>\n        <div className=\"Graph-data3\" style=\"height:55.9%\">AUD $</div>\n        <div className=\"Graph-data4\" style=\"height:45.5%\">GBP &pound</div>\n    </div>\n    */\n    \n    // Get the rates\n    // Note: used for..of becasue it is MUCH faster than Object.entries\n \n    for (const key of Object.keys(this.rates))\n    {\n        const value = this.rates[key];\n        \n        //Check for properties from prototype chain   \n        if (this.rates.hasOwnProperty(key))\n        {\n            //not a property from prototype chain\n            // format value to be x.xx\n            const formatValue = parseFloat(value).toFixed(2) * 30;\n            // format the HTML style attribute\n            const style = 'height:' + formatValue + '%';\n            \n\n            // Modify State\n            this.setState = ({\n              style : style,\n              countryCode:key,\n              monetarySymbol:\"$\",\n           });\n        }\n    }\n}\n\n\n/*\ngetSelect()\n{\n    // Create a query string by setting the new baseCode and removing new base from comparator\n    console.log(\"In GetSelect\");\n    \n    // Currently displayed currencies;\n    let symbols = [\"BGN\", \"SGD\", \"AUD\", \"EUR\", \"USD\"];\n    let comparator = \"BGN,SGD,AUD,EUR,USD\";\n    \n    \n    // Get the requested base currency\n    //const baseCode = document.getElementById(\"BaseCode\").value;\n    console.log(\"New Base Code:\", this.baseCode);\n    \n    \n    let i = 0;\n    while ((symbols[i++].valueOf() !== this.baseCode) && ( i < symbols.length))  // find the code in symbols\n    {}\n    \n    i--;  // reposition counter to found item\n    if (symbols[i] === this.baseCode)\n    {\n        comparator = symbols.splice(i,1);  // remmove elemment\n    }\n    console.log(\"symbols:\", comparator);\n    \n    let fetchString='https://api.exchangeratesapi.io/2018-11-01?base=' + this.baseCode + \"&symbols=\" + symbols;\n    \n    // Make request\n    fetch(fetchString)\n     .then(response => response.json())\n     .then ( (data) => {\n           console.log(\"Got Data\");\n           console.log(data);\n           this.buildData(data.rates);\n       });\n}\n\n*/\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}