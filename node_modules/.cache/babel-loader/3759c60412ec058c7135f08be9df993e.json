{"ast":null,"code":"import _classCallCheck from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lboylan/Documents/Homework/HW3/graph-bar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lboylan/Documents/Homework/HW3/graph-bar/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      \"date\": \"2018-01-01\",\n      \"rates\": {\n        \"USD\": 1.0,\n        \"GBP\": 10.0\n      },\n      \"baseCode\": \"USD \" // Add data during initial page load. Kind of likke constructor\n\n    };\n\n    _this.componentDidMount = function () {\n      _this.getData();\n    };\n\n    _this.onBaseCodeChange = function (ev) {\n      _this.setState({\n        baseCode: ev.target.value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \" Currency\"), React.createElement(\"h2\", {\n        className: \"BaseValue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Base Currency:\"), React.createElement(\"select\", {\n        basecode: this.baseCode,\n        className: \"BaseCode\",\n        onChange: this.onBaseCodeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"USA\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"USA\"), React.createElement(\"option\", {\n        value: \"AUD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"AUD\"), React.createElement(\"option\", {\n        value: \"SGD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"SGD\"), React.createElement(\"option\", {\n        value: \"EUR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"EUR\")), React.createElement(\"div\", {\n        className: \"Graph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Graph-data1\",\n        style: {\n          height: '88.5%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"EUR &#8364\"), React.createElement(\"div\", {\n        className: \"Graph-data2\",\n        style: {\n          height: '75.5%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"USD $\"), React.createElement(\"div\", {\n        className: \"Graph-data3\",\n        style: {\n          height: '55.9%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"AUD $\"), React.createElement(\"div\", {\n        className: \"Graph-data4\",\n        style: {\n          height: '45.5%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"GBP &pound\")));\n    }\n  }, {\n    key: \"getData\",\n\n    /*\n      onSubmit = () => {\n          // TODO fill me in\n          // HINT: https://api.github.com/users/michaelpb/repos\n      }\n    \n    */\n    value: function getData() {\n      var _this2 = this;\n\n      console.log(\"In GetData\"); // The data format from the remote site will be\n      // \"date\": \"YYYY-MM-DD\",\n      // \"rates\": {\"CCC\":dec,\"CCC\":dec,}, \n      // \"base\":\n\n      /* Use to test\n      const data =\n      {\n          \"date\" : \"2018-01-01\",\n          \"rates\":{\"USD\":1.0,\"GBP\":10.0},\n          \"base\":\"USD \"        \n      };\n      */\n\n      /*  Static Values for testing\n      let data =  {\n          \"date\" : \"2018-01-01\",\n          \"rates\":{\"USD\":1.0,\"GBP\":10.0},\n          \"base\":\"USD \"        \n      };\n      */\n\n      fetch(\"https://api.exchangeratesapi.io/latest?base=USD&symbols=BGN,GBP,AUD,EUR\").then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(\"Got Data\");\n        console.log(data);\n\n        _this2.buildData(data.rates);\n      });\n      /* Not working\n       // 404\n       if (!data.main) {\n         this.setState({\n           location: \"Not found.\",\n         });\n         return;\n       }\n      */\n    }\n  }, {\n    key: \"buildData\",\n    value: function buildData(rates) {\n      console.log(\"In buildData\"); //Using rates, refresh the graph\n\n      /*\n      // The format of the HTML to be modified is:\n      let graph = document.querySelect('#Graph');\n      <div className=\"Graph\">\n          <div className=\"Graph-data1\" onclick=\"alert(\\'EUR costs 0.88lb\\') \" style=\"height:88.5%\" \">EUR &#8364</div>\n          <div className=\"Graph-data2\" style=\"height:75.5%\">USD $</div>\n          <div className=\"Graph-data3\" style=\"height:55.9%\">AUD $</div>\n          <div className=\"Graph-data4\" style=\"height:45.5%\">GBP &pound</div>\n      </div>\n      */\n      // Get the rates\n      // Note: used for..of becasue it is MUCH faster than Object.entries\n\n      var lineNum = 1;\n\n      var _arr = Object.keys(this.rates);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        var value = this.rates[key]; //Check for properties from prototype chain   \n\n        if (this.rates.hasOwnProperty(key)) {\n          //not a property from prototype chain\n          var graphString = '.Graph-data' + lineNum++; // format value to be x.xx\n\n          var formatValue = parseFloat(value).toFixed(2) * 30; // format the HTML style attribute\n\n          var style = 'height:' + formatValue + '%';\n          /*\n          // Modify the DOM Element\n          let graphBar = document.querySelector(graphString); \n          graphBar.setAttribute(\"style\", style);\n                     // Add text to bar\n          const symbol = \"$\";   // Should automate this\n          graphBar.textContent=key + \" \" + symbol;\n          \n          */\n        }\n      }\n    }\n    /*\n    getSelect()\n    {\n        // Create a query string by setting the new baseCode and removing new base from comparator\n        console.log(\"In GetSelect\");\n        \n        // Currently displayed currencies;\n        let symbols = [\"BGN\", \"SGD\", \"AUD\", \"EUR\", \"USD\"];\n        let comparator = \"BGN,SGD,AUD,EUR,USD\";\n        \n        \n        // Get the requested base currency\n        //const baseCode = document.getElementById(\"BaseCode\").value;\n        console.log(\"New Base Code:\", this.baseCode);\n        \n        \n        let i = 0;\n        while ((symbols[i++].valueOf() !== this.baseCode) && ( i < symbols.length))  // find the code in symbols\n        {}\n        \n        i--;  // reposition counter to found item\n        if (symbols[i] === this.baseCode)\n        {\n            comparator = symbols.splice(i,1);  // remmove elemment\n        }\n        console.log(\"symbols:\", comparator);\n        \n        let fetchString='https://api.exchangeratesapi.io/2018-11-01?base=' + this.baseCode + \"&symbols=\" + symbols;\n        \n        // Make request\n        fetch(fetchString)\n         .then(response => response.json())\n         .then ( (data) => {\n               console.log(\"Got Data\");\n               console.log(data);\n               this.buildData(data.rates);\n           });\n    }\n    \n    */\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/lboylan/Documents/Homework/HW3/graph-bar/src/App.js"],"names":["React","Component","App","state","componentDidMount","getData","onBaseCodeChange","ev","setState","baseCode","target","value","height","console","log","fetch","then","response","json","data","buildData","rates","lineNum","Object","keys","key","hasOwnProperty","graphString","formatValue","parseFloat","toFixed","style"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;IAEMC,G;;;;;;;;;;;;;;;;;UACNC,K,GAAO;AACC,cAAS,YADV;AAEC,eAAQ;AAAC,eAAM,GAAP;AAAW,eAAM;AAAjB,OAFT;AAGC,kBAAW,MAHZ,CAML;;AANK,K;;UAOHC,iB,GAAoB,YAAM;AAC1B,YAAKC,OAAL;AACD,K;;UA0BDC,gB,GAAmB,UAACC,EAAD,EAAQ;AACzB,YAAKC,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAEF,EAAE,CAACG,MAAH,CAAUC;AADR,OAAd;AAGD,K;;;;;;;6BAzBD;AACE,aACA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF,EAGE;AAAQ,QAAA,QAAQ,EAAE,KAAKF,QAAvB;AAAiC,QAAA,SAAS,EAAC,UAA3C;AAAsD,QAAA,QAAQ,EAAE,KAAKH,gBAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,EAIE;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CAHF,EASE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAE;AAACM,UAAAA,MAAM,EAAC;AAAR,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAE;AAACA,UAAAA,MAAM,EAAC;AAAR,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,EAGE;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAE;AAACA,UAAAA,MAAM,EAAC;AAAR,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,EAIE;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAE;AAACA,UAAAA,MAAM,EAAC;AAAR,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CATF,CADA;AAkBD;;;;AAQH;;;;;;;8BASA;AAAA;;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADJ,CAGI;AACA;AACA;AACA;;AAEA;;;;;;;;;AASA;;;;;;;;AAQCC,MAAAA,KAAK,CAAC,yEAAD,CAAL,CACCC,IADD,CACM,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADd,EAECF,IAFD,CAEQ,UAACG,IAAD,EAAU;AACZN,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;;AACA,QAAA,MAAI,CAACC,SAAL,CAAeD,IAAI,CAACE,KAApB;AACH,OANH;AAQE;;;;;;;;;AASN;;;8BAGSA,K,EACV;AACIR,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADJ,CAGI;;AAEA;;;;;;;;;;AAWA;AACA;;AACA,UAAIQ,OAAO,GAAG,CAAd;;AAlBJ,iBAoBsBC,MAAM,CAACC,IAAP,CAAY,KAAKH,KAAjB,CApBtB;;AAoBI,+CACA;AADK,YAAMI,GAAG,WAAT;AAED,YAAMd,KAAK,GAAG,KAAKU,KAAL,CAAWI,GAAX,CAAd,CADJ,CAGI;;AACA,YAAI,KAAKJ,KAAL,CAAWK,cAAX,CAA0BD,GAA1B,CAAJ,EACA;AACI;AACA,cAAIE,WAAW,GAAC,gBAAgBL,OAAO,EAAvC,CAFJ,CAII;;AACA,cAAMM,WAAW,GAAGC,UAAU,CAAClB,KAAD,CAAV,CAAkBmB,OAAlB,CAA0B,CAA1B,IAA+B,EAAnD,CALJ,CAMI;;AACA,cAAMC,KAAK,GAAG,YAAYH,WAAZ,GAA0B,GAAxC;AAEA;;;;;;;;;AAUH;AACJ;AACJ;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAnJkB3B,S;;AA8LlB,eAAeC,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\nstate ={\n        \"date\" : \"2018-01-01\",\n        \"rates\":{\"USD\":1.0,\"GBP\":10.0},\n        \"baseCode\":\"USD \"        \n}\n\n  // Add data during initial page load. Kind of likke constructor\n    componentDidMount = () => {\n    this.getData();\n  }\n\n\n\n  render() \n  {\n    return (\n    <div className=\"App\">\n      <h1 className=\"Title\"> Currency</h1>\n      <h2 className=\"BaseValue\">Base Currency:</h2>\n      <select basecode={this.baseCode} className=\"BaseCode\" onChange={this.onBaseCodeChange}>\n        <option value=\"USA\">USA</option>\n        <option value=\"AUD\">AUD</option>\n        <option value=\"SGD\">SGD</option>\n        <option value=\"EUR\">EUR</option>\n      </select>\n      <div className=\"Graph\">\n        <div className=\"Graph-data1\" style={{height:'88.5%'}}>EUR &#8364</div>\n        <div className=\"Graph-data2\" style={{height:'75.5%'}}>USD $</div>\n        <div className=\"Graph-data3\" style={{height:'55.9%'}}>AUD $</div>\n        <div className=\"Graph-data4\" style={{height:'45.5%'}}>GBP &pound</div>\n      </div>\n    </div>\n    );\n  }\n\n  onBaseCodeChange = (ev) => {\n    this.setState({\n      baseCode: ev.target.value,\n    });\n  }\n\n/*\n  onSubmit = () => {\n      // TODO fill me in\n      // HINT: https://api.github.com/users/michaelpb/repos\n  }\n\n*/\n\ngetData()\n{\n    console.log(\"In GetData\");\n    \n    // The data format from the remote site will be\n    // \"date\": \"YYYY-MM-DD\",\n    // \"rates\": {\"CCC\":dec,\"CCC\":dec,}, \n    // \"base\":\n    \n    /* Use to test\n    const data =\n    {\n        \"date\" : \"2018-01-01\",\n        \"rates\":{\"USD\":1.0,\"GBP\":10.0},\n        \"base\":\"USD \"        \n    };\n   */\n    \n    /*  Static Values for testing\n    let data =  {\n        \"date\" : \"2018-01-01\",\n        \"rates\":{\"USD\":1.0,\"GBP\":10.0},\n        \"base\":\"USD \"        \n    };\n    */\n\n     fetch(\"https://api.exchangeratesapi.io/latest?base=USD&symbols=BGN,GBP,AUD,EUR\")\n     .then(response => response.json())\n     .then ( (data) => {\n           console.log(\"Got Data\");\n           console.log(data);\n           this.buildData(data.rates);\n       });\n       \n       /* Not working\n        // 404\n        if (!data.main) {\n          this.setState({\n            location: \"Not found.\",\n          });\n          return;\n        }\n    */\n}\n\n\nbuildData(rates)\n{\n    console.log(\"In buildData\");\n    \n    //Using rates, refresh the graph\n         \n    /*\n    // The format of the HTML to be modified is:\n    let graph = document.querySelect('#Graph');\n    <div className=\"Graph\">\n        <div className=\"Graph-data1\" onclick=\"alert(\\'EUR costs 0.88lb\\') \" style=\"height:88.5%\" \">EUR &#8364</div>\n        <div className=\"Graph-data2\" style=\"height:75.5%\">USD $</div>\n        <div className=\"Graph-data3\" style=\"height:55.9%\">AUD $</div>\n        <div className=\"Graph-data4\" style=\"height:45.5%\">GBP &pound</div>\n    </div>\n    */\n    \n    // Get the rates\n    // Note: used for..of becasue it is MUCH faster than Object.entries\n    let lineNum = 1;\n    \n    for (const key of Object.keys(this.rates))\n    {\n        const value = this.rates[key];\n        \n        //Check for properties from prototype chain   \n        if (this.rates.hasOwnProperty(key))\n        {\n            //not a property from prototype chain\n            let graphString='.Graph-data' + lineNum++;\n\n            // format value to be x.xx\n            const formatValue = parseFloat(value).toFixed(2) * 30;\n            // format the HTML style attribute\n            const style = 'height:' + formatValue + '%';\n            \n            /*\n            // Modify the DOM Element\n            let graphBar = document.querySelector(graphString); \n            graphBar.setAttribute(\"style\", style);\n          \n            // Add text to bar\n            const symbol = \"$\";   // Should automate this\n            graphBar.textContent=key + \" \" + symbol;\n            \n            */\n        }\n    }\n}\n\n\n/*\ngetSelect()\n{\n    // Create a query string by setting the new baseCode and removing new base from comparator\n    console.log(\"In GetSelect\");\n    \n    // Currently displayed currencies;\n    let symbols = [\"BGN\", \"SGD\", \"AUD\", \"EUR\", \"USD\"];\n    let comparator = \"BGN,SGD,AUD,EUR,USD\";\n    \n    \n    // Get the requested base currency\n    //const baseCode = document.getElementById(\"BaseCode\").value;\n    console.log(\"New Base Code:\", this.baseCode);\n    \n    \n    let i = 0;\n    while ((symbols[i++].valueOf() !== this.baseCode) && ( i < symbols.length))  // find the code in symbols\n    {}\n    \n    i--;  // reposition counter to found item\n    if (symbols[i] === this.baseCode)\n    {\n        comparator = symbols.splice(i,1);  // remmove elemment\n    }\n    console.log(\"symbols:\", comparator);\n    \n    let fetchString='https://api.exchangeratesapi.io/2018-11-01?base=' + this.baseCode + \"&symbols=\" + symbols;\n    \n    // Make request\n    fetch(fetchString)\n     .then(response => response.json())\n     .then ( (data) => {\n           console.log(\"Got Data\");\n           console.log(data);\n           this.buildData(data.rates);\n       });\n}\n\n*/\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}